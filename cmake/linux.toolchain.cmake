set(CMAKE_SYSTEM_NAME Linux)

if(LINUX_TOOLCHAIN_INCLUDED)
    return() # avoid double-loading issue
endif()
set(LINUX_TOOLCHAIN_INCLUDED TRUE)

if(DEFINED ENV{SYSROOT_NAME})
    set(SYSROOT_NAME "$ENV{SYSROOT_NAME}" CACHE STRING "" FORCE)
endif()

if(DEFINED CMAKE_SYSROOT)
    if(NOT DEFINED SYSROOT_NAME)
        get_filename_component(SYSROOT_NAME "${CMAKE_SYSROOT}" NAME CACHE)
    endif()
endif()

if(DEFINED SYSROOT_NAME)
    set(ENV{SYSROOT_NAME} "${SYSROOT_NAME}")
endif()

if(NOT DEFINED SYSROOT_NAME)
    message(FATAL_ERROR "SYSROOT_NAME not defined!")
endif()

string(REGEX REPLACE "([^-]+)-[^-]+-[^-]+" "\\1" SYSROOT_DISTRO ${SYSROOT_NAME})
string(REGEX REPLACE "[^-]+-([^-]+)-[^-]+" "\\1" SYSROOT_VERSION ${SYSROOT_NAME})
string(REGEX REPLACE "[^-]+-[^-]+-([^-]+)" "\\1" SYSROOT_ARCH ${SYSROOT_NAME})

if((SYSROOT_ARCH STREQUAL "amd64") OR (SYSROOT_ARCH STREQUAL "x86_64"))
    set(CMAKE_SYSTEM_PROCESSOR "x86_64")
elseif((SYSROOT_ARCH STREQUAL "arm64") OR (SYSROOT_ARCH STREQUAL "aarch64"))
    set(CMAKE_SYSTEM_PROCESSOR "aarch64")
else()
    message(FATAL_ERROR "Unknown sysroot architecture: ${SYSROOT_ARCH}")
endif()

if(NOT DEFINED CMAKE_SYSROOT)
    get_filename_component(CBAKE_HOME "${CMAKE_CURRENT_LIST_DIR}/.." ABSOLUTE CACHE)

    if(NOT IS_DIRECTORY "${CBAKE_HOME}")
        message(FATAL_ERROR "CBAKE_HOME directory does not exist: ${CBAKE_HOME}")
    endif()

    set(CMAKE_SYSROOT "${CBAKE_HOME}/sysroots/${SYSROOT_NAME}" CACHE STRING "" FORCE)
endif()

if(NOT IS_DIRECTORY "${CMAKE_SYSROOT}")
    message(FATAL_ERROR "CMAKE_SYSROOT directory does not exist: ${CMAKE_SYSROOT}")
endif()

set(CMAKE_CROSS_COMPILING TRUE)

if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    set(EXE_SUFFIX ".exe")
    set(CMAKE_BUILD_WITH_INSTALL_RPATH ON CACHE BOOL "" FORCE)
else()
    set(EXE_SUFFIX "")
endif()

if(NOT DEFINED LLVM_PREFIX)
    execute_process(COMMAND llvm-config --prefix
        OUTPUT_VARIABLE LLVM_PREFIX
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    file(TO_CMAKE_PATH "${LLVM_PREFIX}" LLVM_PREFIX)
endif()

if(NOT EXISTS "${LLVM_PREFIX}")
    message(FATAL_ERROR "LLVM prefix could not be found: ${LLVM_PREFIX}")
endif()
set(LLVM_PREFIX "${LLVM_PREFIX}" CACHE STRING "" FORCE)

# /usr/<target-name>
# /usr/lib/gcc/<target-name>
# /usr/include/c++/<gcc-version>/<target-name>
# openSUSE uses /usr/lib64/gcc, others use /usr/lib/gcc

if(IS_DIRECTORY "${CMAKE_SYSROOT}/usr/lib64/gcc")
    set(LIBGCC_DIR "/usr/lib64/gcc")
elseif(IS_DIRECTORY "${CMAKE_SYSROOT}/usr/lib/gcc")
    set(LIBGCC_DIR "/usr/lib/gcc")
else()
    message(FATAL_ERROR "Cannot find libgcc directory!")
endif()

set(SYSROOT_LIBGCC_DIR "${CMAKE_SYSROOT}${LIBGCC_DIR}")
file(GLOB CROSS_TARGETS RELATIVE "${SYSROOT_LIBGCC_DIR}" "${SYSROOT_LIBGCC_DIR}/*-linux*")
list(GET CROSS_TARGETS 0 CROSS_TARGET)

set(SYSROOT_LIBGCC_TARGET_DIR "${CMAKE_SYSROOT}${LIBGCC_DIR}/${CROSS_TARGET}")
file(GLOB CROSS_GCC_VERSIONS RELATIVE "${SYSROOT_LIBGCC_TARGET_DIR}" "${SYSROOT_LIBGCC_TARGET_DIR}/*")
list(GET CROSS_GCC_VERSIONS 0 CROSS_GCC_VERSION)

set(ENV{PKG_CONFIG_DIR} "")
string(JOIN ":" PKG_CONFIG_LIBDIR
    "${CMAKE_SYSROOT}/usr/lib/pkgconfig"
    "${CMAKE_SYSROOT}/usr/lib/${CROSS_TARGET}/pkgconfig"
    "${CMAKE_SYSROOT}/usr/share/pkgconfig")
set(ENV{PKG_CONFIG_LIBDIR} "${PKG_CONFIG_LIBDIR}")
set(PKG_CONFIG_SYSROOT_DIR "${CMAKE_SYSROOT}")
set(ENV{PKG_CONFIG_SYSROOT_DIR} "${PKG_CONFIG_SYSROOT_DIR}")

set(CROSS_MULTIARCH_INC_DIR "/usr/include/${CROSS_TARGET}")
set(CROSS_LIBSTDCPP_INC_DIR "/usr/include/c++/${CROSS_GCC_VERSION}")
set(CROSS_LIBSTDCPPBITS_INC_DIR "${CROSS_LIBSTDCPP_INC_DIR}/${CROSS_TARGET}")
set(CROSS_LIBGCC_DIR "${LIBGCC_DIR}/${CROSS_TARGET}/${CROSS_GCC_VERSION}")
set(CROSS_COMPILER_FLAGS "-I \"${CROSS_MULTIARCH_INC_DIR}\"")
set(CROSS_LINKER_FLAGS "-fuse-ld=lld -stdlib=libstdc++ -L \"${CROSS_LIBGCC_DIR}\"")
set(CMAKE_AR "${LLVM_PREFIX}/bin/llvm-ar" CACHE FILEPATH "" FORCE)
set(CMAKE_NM "${LLVM_PREFIX}/bin/llvm-nm" CACHE FILEPATH "" FORCE)
set(CMAKE_RANLIB "${LLVM_PREFIX}/bin/llvm-ranlib${EXE_SUFFIX}" CACHE FILEPATH "" FORCE)
set(CMAKE_OBJCOPY "${LLVM_PREFIX}/bin/llvm-objcopy${EXE_SUFFIX}" CACHE FILEPATH "" FORCE)
set(CMAKE_SIZE_UTIL "${LLVM_PREFIX}/bin/llvm-size${EXE_SUFFIX}" CACHE FILEPATH "" FORCE)
set(CMAKE_C_COMPILER "${LLVM_PREFIX}/bin/clang${EXE_SUFFIX}")
set(CMAKE_C_COMPILER_TARGET ${CROSS_TARGET})
set(CMAKE_C_FLAGS "${CROSS_COMPILER_FLAGS} ${CROSS_MACHINE_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> qc <TARGET> <OBJECTS>")
set(CMAKE_C_CREATE_STATIC_LIBRARY "<CMAKE_AR> qc <TARGET> <OBJECTS>")
set(CMAKE_CXX_COMPILER "${LLVM_PREFIX}/bin/clang++${EXE_SUFFIX}")
set(CMAKE_CXX_COMPILER_TARGET ${CROSS_TARGET})
set(CMAKE_CXX_FLAGS "${CROSS_COMPILER_FLAGS} ${CROSS_MACHINE_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -iwithsysroot \"${CROSS_LIBSTDCPP_INC_DIR}\"")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -iwithsysroot \"${CROSS_LIBSTDCPPBITS_INC_DIR}\"")
set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> qc <TARGET> <OBJECTS>")
set(CMAKE_CXX_CREATE_STATIC_LIBRARY "<CMAKE_AR> qc <TARGET> <OBJECTS>")
set(CMAKE_EXE_LINKER_FLAGS ${CROSS_LINKER_FLAGS} CACHE STRING "" FORCE)
set(CMAKE_MODULE_LINKER_FLAGS ${CROSS_LINKER_FLAGS} CACHE STRING "" FORCE)
set(CMAKE_SHARED_LINKER_FLAGS ${CROSS_LINKER_FLAGS} CACHE STRING "" FORCE)
set(CMAKE_STATIC_LINKER_FLAGS ${CROSS_LINKER_FLAGS} CACHE STRING "" FORCE)

set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT} ${CMAKE_PREFIX_PATH} CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
